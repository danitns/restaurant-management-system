@using Restaurant.BusinessLogic.Implementation.Products.Models
@model IEnumerable<Restaurant.BusinessLogic.Implementation.Products.Models.ViewProductModel>
@using Microsoft.AspNetCore.Http
@using Restaurant.Common.DTOs
@using Restaurant.Entities.Enums
@inject IHttpContextAccessor HttpContextAccessor
@inject CurrentUserDTO CurrentUser

@{
    ViewData["Title"] = "Products";
}

<div class="row h-100">
    <div class="col-md-3 p-2 pt-3 border-end bg-light">
        <div class="row pt-4 pb-4 register-card shadow-lg floating-filter-card">
            <div class="d-flex flex-row justify-content-between mb-3">
                <h2>Products</h2>
                @if (CurrentUser.Role == "Admin" || (CurrentUser.Role == "Manager" && ViewBag.IsMyRestaurant))
                {
                    <a class="btn btn-primary rounded-circle" asp-action="CreateProduct" asp-controller="Product" asp-route-id="@ViewBag.RestaurantId" style="height: 45px; width: 45px;">
                        <i class="bi bi-plus"></i>
                    </a>
                }
            </div>
            <hr />
            <h5>Filters:</h5>
            <label>
                Type:
                <select asp-items="Html.GetEnumSelectList<SubcategoryTypes>()" name="SubcategoryId" id="subcategoryIdSelect" class="form-select"></select>
            </label>
            <div class="range_container">
                <div class="sliders_control">
                    <input id="fromSlider" type="range" value="0" min="0" max="100" />
                    <input id="toSlider" type="range" value="0" min="0" max="100" />
                </div>
                <div class="form_control">
                    <div class="form_control_container">
                        <div class="form_control_container__time">Min</div>
                        <input class="form_control_container__time__input" type="number" id="fromInput" value="0" min="0" max="100" />
                    </div>
                    <div class="form_control_container">
                        <div class="form_control_container__time">Max</div>
                        <input class="form_control_container__time__input" type="number" id="toInput" value="0" min="0" max="100" />
                    </div>
                </div>
            </div>
            <div class="text-center mt-4">
                <a class="btn btn-primary" type="button" id="filterButton">Filter <i class="bi bi-funnel"></i></a>
            </div>
            <input type="hidden" name="CurrentPage" id="pageControl" value="0" />
        </div>
    </div>
    <div class="col-md-9 d-flex justify-content-between flex-column pt-3 bg-light">
        <div class="row">
            @if (Model.Count() > 0)
            {
                @foreach (var product in Model)
                {
                    <div class="row restaurant-card mb-2 shadow">

                        <div class="col-4 h-100 p-0 p-2">
                            <img class="restaurant-card-img" src="data:image/png;base64,@Convert.ToBase64String(product.Picture)" alt="" />
                        </div>
                        <div class="col-8 p-3 d-flex justify-content-around flex-column">
                            <h3 class="secondary-heading">@product.Name</h3>
                            <div class="d-flex justify-content-start flex-column">
                                <p><i class="bi bi-geo-alt"></i> Price: @product.Price</p>
                                <p><i class="bi bi-compass"></i> Type: @((SubcategoryTypes)product.SubcategoryId)</p>
                            </div>
                            @if (CurrentUser.Role == "Admin" || (CurrentUser.Role == "Manager" && ViewBag.IsMyRestaurant))
                            {
                                <div class="mt-auto buttonsDiv">
                                    <a class="btn deleteButton btn-outline-secondary">Delete</a>
                                    <a class="btn btn-danger yesButton" style="display: none" asp-action="Delete" asp-controller="Product" asp-route-id="@product.Id" asp-route-restaurantId="@product.RestaurantId">Yes</a>
                                    <a class="btn btn-primary noButton" style="display: none">No</a>
                                </div>

                                @if(ViewBag.ReservationId != null)
                                {
                                    <label>
                                        Quantity:
                                        <input type="number" class="product-quantity" data-product-id="@product.Id" min="0" value="0" />
                                    </label>
                                }
                            }
                        </div>
                    </div>
                }
                @if (ViewBag.ReservationId != null)
                {
                    <div>
                        <input type="hidden" class="reservation-id" value="@ViewBag.ReservationId" />
                        <button id="completeOrderButton" class="btn btn-success">Complete order</button>
                    </div>
                }
            }
            else
            {
                <div class="text-center row h-100">
                    <div class="text-center register-card w-50 mx-auto my-auto p-5 shadow-lg">
                        <h3>There are no products to display.</h3>
                        <a asp-controller="Restaurant" asp-action="Details" asp-route-id="@ViewBag.RestaurantId" class="link-a">Go back.</a>
                    </div>
                </div>

            }
        </div>
        <div class="row mb-3">
            <div class="register-card m-auto pagination-card">
                <div class="d-flex flex-row justify-content-center">
                    <div>
                        <button id="previousPageButton" class="pagination-button" type="button"><i class="bi bi-arrow-left"></i></button>
                    </div>
                    <div>
                        <div id="currentPage" class="currentPageIndex mt-1 mx-2 p-1"></div>
                    </div>
                    <div>
                        @if (Model.Count() < 6)
                        {
                            <button id="nextPageButton" class="pagination-button" disabled type="button"><i class="bi bi-arrow-right"></i></button>
                        }
                        else
                        {
                            <button id="nextPageButton" class="pagination-button" type="button"><i class="bi bi-arrow-right"></i></button>
                        }

                    </div>
                </div>
            </div>
        </div>


    </div>
</div>

<script type="text/javascript" src="~/js/deleteButton.js" defer></script>

<script type="text/javascript" src="~/js/Restaurant/dualRangeSlider.js"></script>

<script type="text/javascript" src="~/js/Restaurant/filtersAndPagination.js"></script>

<script type="text/javascript">
    filtersAndPagination(
        "nextPageButton",
        "previousPageButton",
        "filterButton",
        "currentPage",
        "Product",
        [
            {
                name: 'subcategoryId',
                inputId: 'subcategoryIdSelect',
                valueType: 'value'
            },
            {
                name: 'minPrice',
                inputId: 'fromInput',
                valueType: 'value'
            },
            {
                name: 'maxPriceFilter',
                inputId: 'toInput',
                valueType: 'value'
            }
        ],
        '@ViewBag.RestaurantId',
        [
            'fromInput',
            'toInput',
            'fromSlider',
            'toSlider'
        ]
    );

    document.getElementById('completeOrderButton').addEventListener('click', async function () {
        const reservationId = document.querySelector('.reservation-id')?.value;

        if (!reservationId) {
            alert("No reservation ID found.");
            return;
        }

        const productElements = document.querySelectorAll('.product-quantity');
        const orderItems = [];

        productElements.forEach(element => {
            const productId = element.getAttribute('data-product-id');
            const quantity = parseInt(element.value);

            if (quantity > 0) {
                orderItems.push({ productId, quantity });
            }
        });

        if (orderItems.length === 0) {
            alert("No products selected for the order.");
            return;
        }

        const orderDTO = {
            reservationId: reservationId,
            items: orderItems
        };

        try {
            const response = await fetch('/Reservation/CompleteOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(orderDTO)
            });

            if (response.ok) {
                window.location.href = '/Restaurant/Index';
            } else {
                const error = await response.json();
                alert(`Failed to complete order: ${error.message}`);
            }
        } catch (error) {
            console.error('Error:', error);
            alert('An error occurred while completing the order.');
        }
    });
</script>
